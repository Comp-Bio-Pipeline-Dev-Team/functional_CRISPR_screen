import pandas as pd
import os

## ----USER PROVIDED INPUTS----
## via the config paramter in run_snakemake.sh
sample_id_file = pd.read_csv(config["sample_id_file"])
SAMPLE_PREFIX = sample_id_file["sampleid"]
print(SAMPLE_PREFIX)

RAW_SEQ_IN = config["raw_seq_in"]
BOWTIE_INDEX = config["crispr_sg_index"]
BOWTIE_MISMATCHES = config["bowtie_mismatches"]

## ----CUTADAPT VECTOR VARIABLES----
VECTOR_BP = "TTGTGGAAAGGACGAAACACCG" 
## these will be editable defaults 
VECTOR_MIN_OVERLP = config["vector_seq_minOverlap"]
VECTOR_ERROR = config["vector_seq_error"]

## ----ENVIRONMENTS----
## soon to be docker singularities
## we don't want users to have access to this 
FASTQC_ENV = "fastqc"
MULTIQC_ENV = "multiqc"
CUTADAPT_ENV = "cutadapt"
BOWTIE_ENV = "bowtie1"
BBMAP_ENV = "bbmap"
R_ENV = "r_env_crispr"

## ----WORKFLOW----
## only need to use `expand` in rule all 
rule all:
    input:
        "crispr_screen_out/fastqc_outputs/",
        "crispr_screen_out/multiqc_outputs/fastqc_crispr_screen.html",
        expand("crispr_screen_out/cutadapt_outputs/{sample_prefix}_trimmed.fastq.gz", 
                sample_prefix = SAMPLE_PREFIX),
        ##expand("crispr_screen_out/cutadapt_outputs/{sample_prefix}_untrimmed.fastq.gz",
                ##sample_prefix = SAMPLE_PREFIX),
        expand("crispr_screen_out/bowtie_unaligned/{sample_prefix}_mismatches_allowed_unaligned.sam",
               sample_prefix=SAMPLE_PREFIX),
        expand("crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.sam",
               sample_prefix=SAMPLE_PREFIX),
        expand("crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.log",
                sample_prefix=SAMPLE_PREFIX),
        expand("crispr_screen_out/count_output/{sample_prefix}_counts.txt",
                sample_prefix=SAMPLE_PREFIX),
        expand("crispr_screen_out/count_output/{sample_prefix}_bbpileup.log",
                sample_prefix=SAMPLE_PREFIX),
        "crispr_screen_out/count_output/allSample_counts.tsv",
        "crispr_screen_out/count_output/allSample_counts_long.tsv",
        "crispr_screen_out/count_output/allSample_sgRNAcounts_wide.tsv",
        "crispr_screen_out/count_output/norm-cpm_allSample_sgRNAcounts.tsv",
        "crispr_screen_out/count_output/allSample_geneCounts_wide.tsv",
        "crispr_screen_out/count_output/norm-cpm_allSample_geneCounts.tsv",
        "crispr_screen_out/plots/sgRNACount_PCA_plot.pdf",
        "crispr_screen_out/plots/geneCount_PCA_plot.pdf",
        "crispr_screen_out/qc_files/sgRNACount_PCA_results.tsv",
        "crispr_screen_out/qc_files/geneCount_PCA_results.tsv",
        "crispr_screen_out/plots/sample_totalCount_plot.pdf",
        "crispr_screen_out/plots/sample_transCounts_plot.pdf",
        "crispr_screen_out/qc_files/total_count_results.tsv",
        "crispr_screen_out/qc_files/transform_count_results.tsv",
        "crispr_screen_out/plots/sgRNACount_correlationMatrix.pdf",
        "crispr_screen_out/plots/geneCount_correlationMatrix.pdf",
        "crispr_screen_out/qc_files/sgRNACount_correlation_results.tsv",
        "crispr_screen_out/qc_files/geneCount_correlation_results.tsv"
        




## STEP 0: running fastqc and multiqc
## update everything that should be a path with a forward slash
## this step runs fine!
rule run_fastqc:
    input:
        inDir = RAW_SEQ_IN
    output:
        outDir = directory("crispr_screen_out/fastqc_outputs/")
    conda:
        FASTQC_ENV
    params:
        thread_n = 8
    shell:
        """
        echo "running fastqc"

        mkdir {output.outDir}

        fastqc {input.inDir}/*.fastq.gz -o {output.outDir} --threads {params.thread_n}
        """


rule run_multiqc:
    input:
        inDir = "crispr_screen_out/fastqc_outputs/"
    output:
        fastq_report_out = "crispr_screen_out/multiqc_outputs/fastqc_crispr_screen.html"
    conda:
        MULTIQC_ENV
    params:
        multiqc_dir = "crispr_screen_out/multiqc_outputs/",
        multiqc_filename = "fastqc_crispr_screen.html"
    shell:
        """
        echo "running multiqc"
        
        multiqc {input.inDir} -o {params.multiqc_dir} --filename {params.multiqc_filename} .
        """

## STEP 1: running cutadapt
## specify how many samples can be run at the same time - config spec. w default 
## this step runs fine!
## print("{}.testing{}.txt".format(var1, var2)) or f strings to edit the vector sequence - may not need the print statement
## around it 
rule run_cutadapt:
    input:
        in_samples = os.path.join(RAW_SEQ_IN, "{sample_prefix}_R1_001.fastq.gz")
    output:
        out_samples = "crispr_screen_out/cutadapt_outputs/{sample_prefix}_trimmed.fastq.gz"
        ##out_untrimmed = "crispr_screen_out/cutadapt_outputs/{sample_prefix}_untrimmed.fastq.gz"
    conda:
        CUTADAPT_ENV
    params:
        vector_seq = "\"{};min_overlap={};e={}\"".format(VECTOR_BP, VECTOR_MIN_OVERLP, VECTOR_ERROR),
        guide_length = 20,
        tmp_out = "crispr_screen_out/cutadapt_outputs/tmp_{sample_prefix}.fastq.gz"
    shell:
        """
        cutadapt -g {params.vector_seq} \
                 --length={params.guide_length} \
                 --untrimmed-output {output.out_untrimmed} \
                 -o {output.out_samples} {input.in_samples}
        
        ##untrimmed output
        cutadapt -g {params.vector_seq} \
                 --untrimmed-output {output.out_untrimmed} \
                 -o {params.tmp_out} {input.in_samples} 
        
        rm {params.tmp_out}
        """


## STEP 2: running bowtie1 
rule run_bowtie:
    input:
        in_samples = "crispr_screen_out/cutadapt_outputs/{sample_prefix}_trimmed.fastq.gz"
    output:
        unaligned_out = "crispr_screen_out/bowtie_unaligned/{sample_prefix}_mismatches_allowed_unaligned.sam",
        aligned_out = "crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.sam"
    ## can specify log outputs here
    log:
        log = "crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.log"
    conda:
        BOWTIE_ENV
    params:
        mismatches = BOWTIE_MISMATCHES,
        bowtie_index = BOWTIE_INDEX
    shell:
        """
        bowtie -p 4 \
                -x {params.bowtie_index} \
                -q {input.in_samples} \
                -S \
                --no-unal \
                --trim5 0 \
                --trim3 0 \
                --best \
                --strata \
                -m 1 \
                --un {output.unaligned_out} \
                -v {params.mismatches} \
                > {output.aligned_out} \
                2>{log.log}
        """

## STEP 3: counting guides in bbmap
## the log file is typically empty with everything in the err file - should we just have a log file?
rule run_bbmap:
    input:
        in_samples = "crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.sam"
    output:
        count_out = "crispr_screen_out/count_output/{sample_prefix}_counts.txt"
    log:
        log = "crispr_screen_out/count_output/{sample_prefix}_bbpileup.log"
    conda:
        BBMAP_ENV
    params:
        bbmap_pileup = "pileup.sh"
    shell:
        """
        {params.bbmap_pileup} in={input.in_samples} \
                              out={output.count_out} \
                              2>{log.log}
        """

## any bash variables in curly brackets in the snakemake shell need to be escaped (double brackets instead of single)
rule prep_count_files:
    input:
        decoy_in = expand("crispr_screen_out/count_output/{sample_prefix}_counts.txt",
                           sample_prefix=SAMPLE_PREFIX) 
    output:
        combined_count_file = "crispr_screen_out/count_output/allSample_counts.tsv"
    params:
        inDir = "crispr_screen_out/count_output/",
        out_file_name = "allSample_counts.tsv"
    shell:
        """
        cd {params.inDir}

        file_list=( $(ls *counts.txt | sed 's/_counts.txt//g') )

        for f in ${{file_list[*]}};
            do 
                awk 'NR == 1 {{print $0 "\tsampleid"; next;}}{{print $0 "\t" FILENAME;}}' ${{f}}_counts.txt > ${{f}}_counts_final.txt;
            done

        awk 'NR==FNR||FNR>1' *_counts_final.txt >> {params.out_file_name}

        """

## THE START OF R ANALYSIS
rule normalize_counts:
    input:
        comb_count_table = "crispr_screen_out/count_output/allSample_counts.tsv"
    output:
        comb_countLong_out = "crispr_screen_out/count_output/allSample_counts_long.tsv",
        sgRNA_counts_wide = "crispr_screen_out/count_output/allSample_sgRNAcounts_wide.tsv",
        norm_sgRNA_counts = "crispr_screen_out/count_output/norm-cpm_allSample_sgRNAcounts.tsv",
        gene_counts_wide = "crispr_screen_out/count_output/allSample_geneCounts_wide.tsv",
        norm_gene_counts = "crispr_screen_out/count_output/norm-cpm_allSample_geneCounts.tsv"
    conda:
        R_ENV
    shell:
        """
        Rscript src/normalize_counts.R --comb_count_table {input.comb_count_table} \
                                       --comb_countLong_out {output.comb_countLong_out} \
                                       --sgRNA_counts_wide {output.sgRNA_counts_wide} \
                                       --norm_sgRNA_counts {output.norm_sgRNA_counts} \
                                       --gene_counts_wide {output.gene_counts_wide} \
                                       --norm_gene_counts {output.norm_gene_counts}
        """

rule run_pca:
    input:
        norm_sgRNA_counts = "crispr_screen_out/count_output/norm-cpm_allSample_sgRNAcounts.tsv",
        norm_gene_counts = "crispr_screen_out/count_output/norm-cpm_allSample_geneCounts.tsv"
    output:
        sgRNA_PCA_plot = report("crispr_screen_out/plots/sgRNACount_PCA_plot.pdf",
                                category="PCA Analysis",
                                labels={"Figure": "sgRNA Count PCA"}),
        gene_PCA_plot = report("crispr_screen_out/plots/geneCount_PCA_plot.pdf",
                               category="PCA Analysis",
                               labels={"Figure": "Gene Count PCA"}),
        sgRNA_PCA_table = "crispr_screen_out/qc_files/sgRNACount_PCA_results.tsv",
        gene_PCA_table = "crispr_screen_out/qc_files/geneCount_PCA_results.tsv"
    conda:
        R_ENV
    shell:
        """
        Rscript src/run_pca.R --norm_sgRNA_counts {input.norm_sgRNA_counts} \
                              --norm_gene_counts {input.norm_gene_counts} \
                              --sgRNA_PCA_plot {output.sgRNA_PCA_plot} \
                              --gene_PCA_plot {output.gene_PCA_plot} \
                              --sgRNA_PCA_table {output.sgRNA_PCA_table} \
                              --gene_PCA_table {output.gene_PCA_table}
        """


rule run_total_transform_counts:
    input:
        comb_countLong_table = "crispr_screen_out/count_output/allSample_counts_long.tsv"
    output:
        total_count_plot = "crispr_screen_out/plots/sample_totalCount_plot.pdf",
        trans_count_plot = "crispr_screen_out/plots/sample_transCounts_plot.pdf",
        total_count_table = "crispr_screen_out/qc_files/total_count_results.tsv",
        trans_count_table = "crispr_screen_out/qc_files/transform_count_results.tsv"
    conda:
        R_ENV
    shell:
        """
        Rscript src/run_totalTransform_counts.R --comb_countLong_table {input.comb_countLong_table} \
                                                --total_count_plot {output.total_count_plot} \
                                                --trans_count_plot {output.trans_count_plot} \
                                                --total_count_table {output.total_count_table} \
                                                --trans_count_table {output.trans_count_table}
        """


rule run_correlation:
    input:
        sgRNA_counts_wide = "crispr_screen_out/count_output/allSample_sgRNAcounts_wide.tsv",
        gene_counts_wide = "crispr_screen_out/count_output/allSample_geneCounts_wide.tsv" 
    output:
        sgRNA_corr_plot = report("crispr_screen_out/plots/sgRNACount_correlationMatrix.pdf",
                                  category="Correlation Analysis",
                                  labels={"Figure": "sgRNA Count Correlation Plot"}),
        gene_corr_plot = report("crispr_screen_out/plots/geneCount_correlationMatrix.pdf",
                                category="Correlation Analysis",
                                labels={"Figure": "Gene Count Correlation Plot"}),
        sgRNA_corr_table = "crispr_screen_out/qc_files/sgRNACount_correlation_results.tsv",
        gene_corr_table = "crispr_screen_out/qc_files/geneCount_correlation_results.tsv"
    conda:
        R_ENV
    shell:
        """
        Rscript src/run_correlation.R --sgRNA_counts_wide {input.sgRNA_counts_wide} \
                                      --gene_counts_wide {input.gene_counts_wide} \
                                      --sgRNA_corr_plot {output.sgRNA_corr_plot} \
                                      --gene_corr_plot {output.gene_corr_plot} \
                                      --sgRNA_corr_table {output.sgRNA_corr_table} \
                                      --gene_corr_table {output.gene_corr_table}
        """

        