import pandas as pd
import os

## ----USER PROVIDED INPUTS---
## via the config paramter in run_snakemake.sh
sample_id_file = pd.read_csv(config["sample_id_file"])
SAMPLE_PREFIX = sample_id_file["sampleid"]
print(SAMPLE_PREFIX)

RAW_SEQ_IN = config["raw_seq_in"]
BOWTIE_INDEX = config["crispr_sg_index"]

## ----ENVIRONMENTS----
## soon to be docker singularities
## we don't want users to have access to this 
FASTQC_ENV = "fastqc"
MULTIQC_ENV = "multiqc"
CUTADAPT_ENV = "cutadapt"
BOWTIE_ENV = "bowtie1"
BBMAP_ENV = "bbmap"

## ----WORKFLOW----
## only need to use `expand` in rule all 
rule all:
    input:
        "crispr_screen_out/fastqc_outputs/",
        "crispr_screen_out/multiqc_outputs/fastqc_crispr_screen.html",
        expand("crispr_screen_out/cutadapt_outputs/{sample_prefix}_trimmed.fastq.gz", 
                sample_prefix = SAMPLE_PREFIX),
        expand("crispr_screen_out/bowtie_unaligned/{sample_prefix}_mismatches_allowed_unaligned.sam",
               sample_prefix=SAMPLE_PREFIX),
        expand("crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.sam",
               sample_prefix=SAMPLE_PREFIX),
        expand("crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.log",
                sample_prefix=SAMPLE_PREFIX),
        expand("crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.err",
                sample_prefix=SAMPLE_PREFIX),
        expand("crispr_screen_out/count_output/{sample_prefix}_counts.txt",
                sample_prefix=SAMPLE_PREFIX),
        expand("crispr_screen_out/count_output/{sample_prefix}_bbpileup.log",
                sample_prefix=SAMPLE_PREFIX),
        expand("crispr_screen_out/count_output/{sample_prefix}_bbpileup.err",
                sample_prefix=SAMPLE_PREFIX)
        




## STEP 0: running fastqc and multiqc
## update everything that should be a path with a forward slash
## this step runs fine!
rule run_fastqc:
    input:
        inDir = RAW_SEQ_IN
    output:
        outDir = directory("crispr_screen_out/fastqc_outputs/")
    conda:
        FASTQC_ENV
    params:
        thread_n = 8
    shell:
        """
        echo "running fastqc"

        mkdir {output.outDir}

        fastqc {input.inDir}/*.fastq.gz -o {output.outDir} --threads {params.thread_n}
        """


rule run_multiqc:
    input:
        inDir = "crispr_screen_out/fastqc_outputs/"
    output:
        fastq_report_out = "crispr_screen_out/multiqc_outputs/fastqc_crispr_screen.html"
    conda:
        MULTIQC_ENV
    params:
        multiqc_dir = "crispr_screen_out/multiqc_outputs/",
        multiqc_filename = "fastqc_crispr_screen.html"
    shell:
        """
        echo "running multiqc"
        
        multiqc {input.inDir} -o {params.multiqc_dir} --filename {params.multiqc_filename} .
        """

## STEP 1: running cutadapt
## specify how many samples can be run at the same time - config spec. w default 
## this step runs fine!
rule run_cutadapt:
    input:
        in_samples = os.path.join(RAW_SEQ_IN, "{sample_prefix}_R1_001.fastq.gz")
    output:
        out_samples = "crispr_screen_out/cutadapt_outputs/{sample_prefix}_trimmed.fastq.gz"
    conda:
        CUTADAPT_ENV
    params:
        guide_seq = "\"TTGTGGAAAGGACGAAACACCG;min_overlap=10;e=0.2\"",
        guide_length = 20
    shell:
        """
        cutadapt -g {params.guide_seq} \
                 --length={params.guide_length} \
                 -o {output.out_samples} {input.in_samples}
        """


## STEP 2: running bowtie1
## this works!!
## BUT none of the reads are aligning so idk what's going on 
rule run_bowtie:
    input:
        in_samples = "crispr_screen_out/cutadapt_outputs/{sample_prefix}_trimmed.fastq.gz"
    output:
        unaligned_out = "crispr_screen_out/bowtie_unaligned/{sample_prefix}_mismatches_allowed_unaligned.sam",
        aligned_out = "crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.sam"
    ## can specify log outputs here
    log:
        log = "crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.log",
        err = "crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.err"
    conda:
        BOWTIE_ENV
    params:
        mismatches = 0,
        bowtie_index = BOWTIE_INDEX
    shell:
        """
        bowtie -p 4 \
                {params.bowtie_index} {input.in_samples} \
                -S \
                --no-unal \
                --trim5 0 \
                --trim3 0 \
                --best \
                --strata \
                -m 1 \
                --un {output.unaligned_out} \
                -v {params.mismatches} > {output.aligned_out} \
                1>{log.log} \
                2>{log.err}
        """

## STEP 3: counting guides in bbmap
rule run_bbmap:
    input:
        in_samples = "crispr_screen_out/bowtie_aligned/{sample_prefix}_mismatches_allowed.sam"
    output:
        count_out = "crispr_screen_out/count_output/{sample_prefix}_counts.txt"
    log:
        log = "crispr_screen_out/count_output/{sample_prefix}_bbpileup.log",
        err = "crispr_screen_out/count_output/{sample_prefix}_bbpileup.err"
    conda:
        BBMAP_ENV
    params:
        bbmap_pileup = "pileup.sh"
    shell:
     """
     {params.bbmap_pileup} in={input.in_samples} \
                           out={output.count_out} \
                           1>{log.log} \
                           2>{log.err}
     """




        